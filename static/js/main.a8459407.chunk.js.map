{"version":3,"sources":["logo.svg","Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","prompt","src","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","add","timestamp","FieldValue","serverTimestamp","preventDefault","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,oMC6B5BC,G,MAvBAC,sBAAW,WAAoBC,GAAS,IAA3BC,EAA0B,EAA1BA,QAEnBC,EAF6C,EAAlBC,WAETF,EAAQE,SAE/B,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAM,iBACzC,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,mBAAqB,qBAC3C,kBAACI,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAELR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MAAsDF,EAAQA,gB,iBCJnEU,EAbCC,IAASC,cAAe,CACtCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,Y,iCCsERC,MAvEf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAImBF,mBAAS,CACvC,CAACrB,SAAS,QAAQF,QAAQ,aAC5B,CAACE,SAAS,WAAWF,QAAQ,UAC7B,CAACE,SAAS,OAAOF,QAAQ,aAPZ,mBAIN0B,EAJM,KAIIC,EAJJ,OASmBJ,mBAAS,IAT5B,mBASNrB,EATM,KASI0B,EATJ,KAyCb,OA9BAC,qBAAU,WAERnB,EAAGoB,WAAW,YACbC,QAAQ,YAAY,QACpBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAEA,EAAIC,gBAExC,IAGHR,qBAAU,WAEPD,EAAYU,OAAO,qBAEnB,IAiBD,yBAAKnC,UAAU,OACb,yBAAKoC,IAAI,+FACT,mDACC,mCAASrC,GAEV,0BAAMC,UAAU,YAEhB,kBAACqC,EAAA,EAAD,CAAarC,UAAU,mBACpB,kBAACsC,EAAA,EAAD,CAAOtC,UAAU,YAAYuC,YAAY,mBAAkBC,MAAOnB,EAAOoB,SAAU,SAAAC,GAAK,OAAEpB,EAASoB,EAAMC,OAAOH,UAEjH,kBAACI,EAAA,EAAD,CAAY5C,UAAU,iBAAiB6C,UAAWxB,EAAOhB,QAAQ,YAAYD,MAAM,UAAU0C,KAAK,SAAQC,QAxB9F,SAACL,GAEjBnC,EAAGoB,WAAW,YAAYqB,IAAI,CAC5BnD,QAAQwB,EACRtB,SAASA,EACTkD,UAAUzC,IAASU,UAAUgC,WAAWC,oBAE1CT,EAAMU,iBACN5B,EAAY,GAAD,mBAAKD,GAAL,CAAc,CAACxB,SAASA,EAASsD,KAAKhC,MACjDC,EAAS,MAgBF,kBAAC,IAAD,SAMP,kBAAC,IAAD,KAEIC,EAASS,KAAI,SAAAnC,GAAO,OAClB,kBAAC,EAAD,CAASE,SAAUA,EAAUF,QAASA,UC9D5ByD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1E,c","file":"static/js/main.a8459407.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Typography, CardContent, Card } from '@material-ui/core'\r\nimport   \"./Message.css\"\r\nimport  { forwardRef } from 'react';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nconst  Message=forwardRef(({message,username},ref) => {\r\n\r\n   const isUser=username===message.username;\r\n\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && `message_user`}`}>\r\n          <Card className={isUser ? \"message_userCard\" : \"message_guestCard\"}>\r\n              <CardContent>\r\n              <Typography\r\n                  color=\"white\"\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  >\r\n                     {!isUser && `${message.username || \"Unknown user\"}: `}{message.message}\r\n              </Typography>\r\n              </CardContent>\r\n          </Card>\r\n \r\n          </div>  \r\n         \r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp=firebase.initializeApp( {\r\n    apiKey: \"AIzaSyDaLKAW5f2rT0l-ZdvRw03UinetVSypw20\",\r\n    authDomain: \"facebook-messenger-clone-49a76.firebaseapp.com\",\r\n    databaseURL: \"https://facebook-messenger-clone-49a76.firebaseio.com\",\r\n    projectId: \"facebook-messenger-clone-49a76\",\r\n    storageBucket: \"facebook-messenger-clone-49a76.appspot.com\",\r\n    messagingSenderId: \"830328736465\",\r\n    appId: \"1:830328736465:web:4759053b60d2010eefd3f0\",\r\n    measurementId: \"G-1XQT5YDTH7\"\r\n  });\r\n\r\n  const db=firebaseApp.firestore();\r\n\r\n  export default db;","import React ,{useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport { FormControl, InputLabel ,Input } from '@material-ui/core';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from \"firebase\";\nimport FlipMove from 'react-flip-move';\nimport SendIcon from \"@material-ui/icons/Send\"\nimport { IconButton } from '@material-ui/core';\n\nfunction App() {\n\n  const [input, setInput] = useState(\"\")\n\n  const [messages, setMessages] = useState([\n    {username:\"sandy\",message:\"hey there\"},\n  {username:\"shashank\",message:\"superb\"},\n  {username:\"ravi\",message:\"awesome\"}])\n\n  const [username, setUsername] = useState(\"\")\n\n  useEffect(() => {\n   \n    db.collection(\"messages\")\n    .orderBy(\"timestamp\",\"desc\")\n    .onSnapshot(snapshot =>{\n      setMessages(snapshot.docs.map(doc=>doc.data()))\n    })\n  }, [])\n  \n  \n  useEffect(() => {\n   \n     setUsername(prompt(\"enter username\"))\n    \n  }, [])\n\n\n  const sendMessage=(event)=>{\n\n    db.collection(\"messages\").add({\n      message:input,\n      username:username,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n    })\n    event.preventDefault();\n    setMessages([...messages,{username:username,text:input}]);\n    setInput(\"\");\n   \n\n  }\n  return (\n    <div className=\"App\">\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" />\n      <h1>FACEBOOK- MESSENGER</h1>\n       <h2>HEY {username}</h2>\n\n      <form className=\"app_form\">\n\n      <FormControl className=\"app_formControl\">\n         <Input className=\"app_input\" placeholder=\"Enter message...\"value={input} onChange={event=>setInput(event.target.value) } ></Input>\n        \n        <IconButton className=\"app_iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\"onClick={sendMessage}>\n           <SendIcon />\n        </IconButton>\n        </FormControl>\n      \n      </form>\n    \n    <FlipMove>\n      {\n        messages.map(message=>(\n          <Message username={username} message={message} />\n          \n        ))\n      }\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}